/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FoodDelivery.gui.restaurant;

import java.awt.Rectangle;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;

import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

import FoodDelivery.database.DatabaseUtility;

/**
 *
 * @author PC
 */
public class RestaurantProductPage extends javax.swing.JFrame {

    private int restaurantId;
    private DefaultTableModel model;

    /**
     * Creates new form RestaurantPage
     */
    public RestaurantProductPage(int id) {
//        DatabaseUtility db = new DatabaseUtility();
        initComponents();
        this.model = (DefaultTableModel) ProductTable.getModel();
        this.restaurantId = id;
        populateTable(true);
        populateTextField();
        enableActionBtn();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane4 = new javax.swing.JScrollPane();
        ProductTable = new javax.swing.JTable();
        FirstNavButton = new javax.swing.JButton();
        DeleteButton = new javax.swing.JButton();
        SearchField = new javax.swing.JTextField();
        SaveButton = new javax.swing.JButton();
        SearchButton = new javax.swing.JButton();
        NameTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        ClearSearchButton = new javax.swing.JButton();
        IDTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        ProductTypeComboBox = new javax.swing.JComboBox<>();
        PrevNavButton = new javax.swing.JButton();
        AddButton = new javax.swing.JButton();
        LastNavButton = new javax.swing.JButton();
        EditButton = new javax.swing.JButton();
        NextNavButton = new javax.swing.JButton();
        CancelButton = new javax.swing.JButton();
        PriceTextField = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        BackNavBtn = new javax.swing.JButton();
        StockTextField = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1215, 684));

        ProductTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        ProductTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                ProductTableMouseClicked(evt);
            }
        });
        jScrollPane4.setViewportView(ProductTable);

        FirstNavButton.setText("<<");
        FirstNavButton.setEnabled(false);
        FirstNavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FirstNavButtonActionPerformed(evt);
            }
        });

        DeleteButton.setText("Delete");
        DeleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteButtonActionPerformed(evt);
            }
        });

        SearchField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFieldActionPerformed(evt);
            }
        });
        SearchField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                SearchFieldKeyTyped(evt);
            }
        });

        SaveButton.setText("Save");
        SaveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SaveButtonActionPerformed(evt);
            }
        });

        SearchButton.setText("Search");
        SearchButton.setEnabled(false);
        SearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchButtonActionPerformed(evt);
            }
        });

        NameTextField.setText("jTextField1");

        jLabel1.setText("ID");

        ClearSearchButton.setText("X");
        ClearSearchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearSearchButtonActionPerformed(evt);
            }
        });

        IDTextField.setText("jTextField1");
        IDTextField.setEnabled(false);
        IDTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDTextFieldActionPerformed(evt);
            }
        });

        jLabel2.setText("Name");

        jLabel3.setText("Price");

        jLabel4.setText("Type");

        ProductTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Food", "Drink" }));

        PrevNavButton.setText("<");
        PrevNavButton.setEnabled(false);
        PrevNavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PrevNavButtonActionPerformed(evt);
            }
        });

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        LastNavButton.setText(">>");
        LastNavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LastNavButtonActionPerformed(evt);
            }
        });

        EditButton.setText("Edit");
        EditButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EditButtonActionPerformed(evt);
            }
        });

        NextNavButton.setText(">");
        NextNavButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NextNavButtonActionPerformed(evt);
            }
        });

        CancelButton.setText("Cancel");
        CancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CancelButtonActionPerformed(evt);
            }
        });

        PriceTextField.setText("jTextField1");

        jLabel6.setFont(new java.awt.Font("Segoe UI Semibold", 0, 48)); // NOI18N
        jLabel6.setText("Product Manager");

        BackNavBtn.setText("< Back to Dashboard");
        BackNavBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackNavBtnActionPerformed(evt);
            }
        });

        StockTextField.setText("jTextField1");
        StockTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StockTextFieldActionPerformed(evt);
            }
        });

        jLabel5.setText("Stock");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(BackNavBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(79, 79, 79)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 395, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(AddButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(EditButton)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(DeleteButton)
                                        .addGap(18, 18, 18)
                                        .addComponent(CancelButton))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addComponent(jLabel5)
                                            .addGap(21, 21, 21)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                    .addComponent(FirstNavButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(PrevNavButton)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(NextNavButton)
                                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                    .addComponent(LastNavButton, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                    .addGap(0, 0, Short.MAX_VALUE))
                                                .addComponent(StockTextField)))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(jLabel4)
                                                .addComponent(jLabel2)
                                                .addComponent(jLabel1)
                                                .addComponent(jLabel3))
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(ProductTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(SaveButton)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 92, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, 233, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SearchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClearSearchButton))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(BackNavBtn)
                .addGap(42, 42, 42)
                .addComponent(jLabel6)
                .addGap(69, 69, 69)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(IDTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(NameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(PriceTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(ProductTypeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(StockTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(PrevNavButton)
                    .addComponent(LastNavButton)
                    .addComponent(NextNavButton)
                    .addComponent(FirstNavButton))
                .addGap(118, 118, 118)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(CancelButton)
                    .addComponent(SaveButton)
                    .addComponent(EditButton)
                    .addComponent(DeleteButton))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchButton)
                    .addComponent(ClearSearchButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 632, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void FirstNavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FirstNavButtonActionPerformed
        // TODO add your handling code here:
        if (ProductTable.getRowCount() > 0) {
            ProductTable.setRowSelectionInterval(0, 0);
        }

        navRowHandler();
        populateTextField();
    }//GEN-LAST:event_FirstNavButtonActionPerformed

    private void DeleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteButtonActionPerformed
        // TODO add your handling code here:
        EditButton.setEnabled(false);
        disableActionBtn();

        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to delete?", "Delete row(s)?", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            String sql = "delete Products WHERE product_id=? and restaurant_id=?";
            try (Connection connection = DatabaseUtility.getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setInt(1, Integer.parseInt(IDTextField.getText()));
                statement.setInt(2, this.restaurantId);

                int rowsUpdated = statement.executeUpdate();

                if (rowsUpdated > 0) {
                    populateTable(false);
                    System.out.println("Delete successful");
                } else {
                    System.out.println("No rows updated. Check your ID.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e);
            } finally {
                enableActionBtn();
            }
        } else {
            enableActionBtn();
        }
    }//GEN-LAST:event_DeleteButtonActionPerformed

    private void SearchFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_SearchFieldActionPerformed

    private void SearchFieldKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_SearchFieldKeyTyped
        // TODO add your handling code here:\

        int inputLength = SearchField.getText().length();

        if (inputLength > 0) {
            SearchButton.setEnabled(true);
        } else {
            SearchButton.setEnabled(false);
        }
    }//GEN-LAST:event_SearchFieldKeyTyped

    private void SaveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SaveButtonActionPerformed
        // TODO add your handling code here:

        String sql = "INSERT INTO Products (product_name, product_price, product_type, restaurant_id)" + "VALUES(?,?,?,?)";
        try (Connection connection = DatabaseUtility.getConnection(); PreparedStatement statement = connection.prepareStatement(sql);) {
            statement.setString(1, NameTextField.getText());
            statement.setDouble(2, Double.parseDouble(PriceTextField.getText()));
            statement.setString(3, ProductTypeComboBox.getSelectedItem().toString());
            statement.setInt(4, this.restaurantId);

            int rowsUpdated = statement.executeUpdate();
            if (rowsUpdated > 0) {
                populateTable(false);
                System.out.println("Create successful");
            } else {
                System.out.println("No rows updated.");
            }
        } catch (Exception e) {
            System.out.println(e);
        } finally {
            enableActionBtn();
        }
        populateTable(false);
    }//GEN-LAST:event_SaveButtonActionPerformed

    private void SearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchButtonActionPerformed
        // TODO add your handling code here:
        this.model.setRowCount(0);

        String sql = "select * from Products where product_name like ? and restaurant_id= ?";
        try (Connection connection = DatabaseUtility.getConnection(); PreparedStatement statement = connection.prepareStatement(sql);) {
            statement.setString(1, SearchField.getText() + "%");
            statement.setInt(2, this.restaurantId);

            try (ResultSet resultSet = statement.executeQuery()) {
                ResultSetMetaData metaData = resultSet.getMetaData();
                int columnCount = metaData.getColumnCount();

                Object[] rowData = new Object[columnCount];
                while (resultSet.next()) {
                    for (int i = 1; i <= columnCount; i++) {
                        rowData[i - 1] = resultSet.getString(i);
                    }
                    this.model.addRow(rowData);
                }

                if (ProductTable.getRowCount() > 0) {
                    ProductTable.setRowSelectionInterval(0, 0);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_SearchButtonActionPerformed

    private void ClearSearchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearSearchButtonActionPerformed
        // TODO add your handling code here:
        SearchField.setText("");
        SearchButton.setEnabled(false);
        populateTable(false);
    }//GEN-LAST:event_ClearSearchButtonActionPerformed

    private void IDTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_IDTextFieldActionPerformed

    private void PrevNavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PrevNavButtonActionPerformed
        // TODO add your handling code here:
        int prevIndex = ProductTable.getSelectedRow() - 1;

        if (ProductTable.getRowCount() > 0) {
            ProductTable.setRowSelectionInterval(prevIndex, prevIndex);
        }
        navRowHandler();

        populateTextField();
    }//GEN-LAST:event_PrevNavButtonActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        clearTextField();
        disableActionBtn();
    }//GEN-LAST:event_AddButtonActionPerformed

    private void LastNavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LastNavButtonActionPerformed
        // TODO add your handling code here:
        int rowCount = ProductTable.getRowCount();
        if (rowCount > 0) {
            ProductTable.setRowSelectionInterval(rowCount - 1, rowCount - 1);
        }
        navRowHandler();
        populateTextField();
    }//GEN-LAST:event_LastNavButtonActionPerformed

    private void EditButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EditButtonActionPerformed
        // TODO add your handling code here:
        disableActionBtn();

        int confirmation = JOptionPane.showConfirmDialog(this, "Are you sure you want to apply update?", "Update row(s)?", JOptionPane.YES_NO_OPTION);
        if (confirmation == JOptionPane.YES_OPTION) {
            String sql = "update Products set product_name=?, product_price=?, product_type=?, stock=? WHERE product_id=? and restaurant_id=?";
            try (Connection connection = DatabaseUtility.getConnection(); PreparedStatement statement = connection.prepareStatement(sql)) {
                statement.setString(1, NameTextField.getText());
                statement.setDouble(2, Double.parseDouble(PriceTextField.getText()));
                statement.setString(3, ProductTypeComboBox.getSelectedItem().toString());
                statement.setInt(4, Integer.parseInt(StockTextField.getText()));
                statement.setInt(5, Integer.parseInt(IDTextField.getText()));
                statement.setInt(5, this.restaurantId);

                int rowsUpdated = statement.executeUpdate();

                if (rowsUpdated > 0) {
                    populateTable(false);
                    System.out.println("Update successful");
                } else {
                    System.out.println("No rows updated. Check your ID.");
                }
            } catch (Exception e) {
                System.out.println("Error: " + e);
            } finally {
                enableActionBtn();
            }
        } else {
            enableActionBtn();
        }
    }//GEN-LAST:event_EditButtonActionPerformed

    private void NextNavButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NextNavButtonActionPerformed
        // TODO add your handling code here:
        int nextIndex = ProductTable.getSelectedRow() + 1;

        if (ProductTable.getRowCount() > 0) {
            ProductTable.setRowSelectionInterval(nextIndex, nextIndex);
        }
        navRowHandler();
        populateTextField();
    }//GEN-LAST:event_NextNavButtonActionPerformed

    private void CancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CancelButtonActionPerformed
        // TODO add your handling code here:
        populateTextField();
        enableActionBtn();
    }//GEN-LAST:event_CancelButtonActionPerformed

    private void ProductTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_ProductTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = ProductTable.getSelectedRow();

        navRowHandler();

        IDTextField.setText(ProductTable.getValueAt(selectedRow, 0).toString());
        NameTextField.setText(ProductTable.getValueAt(selectedRow, 1).toString());
        PriceTextField.setText(ProductTable.getValueAt(selectedRow, 2).toString());
        String productType = ProductTable.getValueAt(selectedRow, 3).toString();

        for (int i = 0; i < ProductTypeComboBox.getItemCount(); i++) {
            if (ProductTypeComboBox.getItemAt(i).toString().equals(productType)) {
                ProductTypeComboBox.setSelectedIndex(i);
                break;
            }
        }
    }//GEN-LAST:event_ProductTableMouseClicked

    private void BackNavBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackNavBtnActionPerformed
        // TODO add your handling code here:
        RestaurantDashboardPage page = new RestaurantDashboardPage(this.restaurantId);
        page.setVisible(true);
        dispose();
    }//GEN-LAST:event_BackNavBtnActionPerformed

    private void StockTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StockTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_StockTextFieldActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestaurantProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestaurantProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestaurantProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestaurantProductPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RestaurantProductPage(1).setVisible(true);
            }
        });
    }

    void disableActionBtn() {
        EditButton.setEnabled(false);
        AddButton.setEnabled(false);
        DeleteButton.setEnabled(false);
        SaveButton.setEnabled(true);
        CancelButton.setEnabled(true);
    }

    void enableActionBtn() {
        EditButton.setEnabled(true);
        AddButton.setEnabled(true);
        DeleteButton.setEnabled(true);
        SaveButton.setEnabled(false);
        CancelButton.setEnabled(false);
    }

    void clearTextField() {
        IDTextField.setText("");
        NameTextField.setText("");
        PriceTextField.setText("");
        ProductTypeComboBox.setSelectedIndex(-1);
    }

    void navRowHandler() {
        int selectedRow = ProductTable.getSelectedRow();
        if (selectedRow == 0) {
            FirstNavButton.setEnabled(false);
            PrevNavButton.setEnabled(false);
            LastNavButton.setEnabled(true);
            NextNavButton.setEnabled(true);
        } else if (selectedRow == ProductTable.getRowCount() - 1) {
            LastNavButton.setEnabled(false);
            NextNavButton.setEnabled(false);
            FirstNavButton.setEnabled(true);
            PrevNavButton.setEnabled(true);
        } else {
            FirstNavButton.setEnabled(true);
            PrevNavButton.setEnabled(true);
            LastNavButton.setEnabled(true);
            NextNavButton.setEnabled(true);
        }
    }

    void populateTable(boolean init) {
        this.model.setRowCount(0);
        String sql = "select product_id, product_name, product_price, product_type, stock from Products where restaurant_id= ?";
        try (Connection connection = DatabaseUtility.getConnection(); PreparedStatement statement = connection.prepareStatement(sql);) {
            statement.setInt(1, this.restaurantId);

            try (ResultSet resultSet = statement.executeQuery()) {
                ResultSetMetaData metaData = resultSet.getMetaData();
                int columnCount = metaData.getColumnCount();

                if (init) {
                    for (int i = 1; i <= columnCount; i++) {
                        this.model.addColumn(metaData.getColumnName(i));
                    }
                }

                Object[] rowData = new Object[columnCount];
                while (resultSet.next()) {
                    for (int i = 1; i <= columnCount; i++) {
                        rowData[i - 1] = resultSet.getString(i);
                    }
                    this.model.addRow(rowData);
                }

                if (ProductTable.getRowCount() > 0) {
                    ProductTable.setRowSelectionInterval(0, 0);
                }
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    void populateTextField() {
        int selectedRow = ProductTable.getSelectedRow();
        IDTextField.setText(ProductTable.getValueAt(selectedRow, 0).toString());
        NameTextField.setText(ProductTable.getValueAt(selectedRow, 1).toString());
        PriceTextField.setText(ProductTable.getValueAt(selectedRow, 2).toString());
        StockTextField.setText(ProductTable.getValueAt(selectedRow, 4).toString());

        String productType = ProductTable.getValueAt(selectedRow, 3).toString();

        for (int i = 0; i < ProductTypeComboBox.getItemCount(); i++) {
            if (ProductTypeComboBox.getItemAt(i).equals(productType)) {
                ProductTypeComboBox.setSelectedIndex(i);
                break; // Exit the loop once a match is found
            }
        }

        Rectangle cellRect = ProductTable.getCellRect(selectedRow, 0, true);
        ProductTable.scrollRectToVisible(cellRect);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddButton;
    private javax.swing.JButton BackNavBtn;
    private javax.swing.JButton CancelButton;
    private javax.swing.JButton ClearSearchButton;
    private javax.swing.JButton DeleteButton;
    private javax.swing.JButton EditButton;
    private javax.swing.JButton FirstNavButton;
    private javax.swing.JTextField IDTextField;
    private javax.swing.JButton LastNavButton;
    private javax.swing.JTextField NameTextField;
    private javax.swing.JButton NextNavButton;
    private javax.swing.JButton PrevNavButton;
    private javax.swing.JTextField PriceTextField;
    private javax.swing.JTable ProductTable;
    private javax.swing.JComboBox<String> ProductTypeComboBox;
    private javax.swing.JButton SaveButton;
    private javax.swing.JButton SearchButton;
    private javax.swing.JTextField SearchField;
    private javax.swing.JTextField StockTextField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane4;
    // End of variables declaration//GEN-END:variables
}
