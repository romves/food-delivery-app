/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package FoodDelivery.gui.popup;

import FoodDelivery.dao.CourierDAO;
import FoodDelivery.dao.OrderDAO;
import FoodDelivery.gui.styling.Home;
import FoodDelivery.gui.user.DeliveryPage;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.SwingUtilities;
import javax.swing.SwingWorker;

/**
 *
 * @author Kenzie Taqiyassar
 */
public class Timer extends javax.swing.JFrame {

    /**
     * Creates new form Timer
     */
    private int userId;
    private int orderId;
    private long orderTime;
    private int restaurantId;  // Added field for restaurantId
    private int paymentId;     // Added field for paymentId
    private TimerWorker timerWorker;

    public Timer(Map<String, Integer> generatedIds, long orderTime) {
        this.userId = generatedIds.get("userId");
        this.orderId = generatedIds.get("orderId");
        this.restaurantId = generatedIds.get("restaurantId");
        this.paymentId = generatedIds.get("paymentId");
        this.orderTime = orderTime;
        initComponents();

        timerWorker = new TimerWorker(orderId);
        timerWorker.execute();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        timerLable = new javax.swing.JLabel();
        cancleButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 0, 30)); // NOI18N
        jLabel1.setText("Waiting Order Accepted...");

        jLabel2.setText("Don't Close Your Tabs");

        timerLable.setText("If 300 secs again not accepted by restaurant, order automatically canceled");

        cancleButton.setText("Cancle Order");
        cancleButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancleButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 353, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(32, 32, 32)
                        .addComponent(timerLable))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(166, 166, 166)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(cancleButton)))
                .addContainerGap(33, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(timerLable)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 242, Short.MAX_VALUE)
                .addComponent(cancleButton)
                .addGap(28, 28, 28)
                .addComponent(jLabel2)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cancleButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancleButtonActionPerformed
        timerWorker.cancel(true); // Stop the background task
        cancelOrder();


    }//GEN-LAST:event_cancleButtonActionPerformed
    private void timerLogic(long orderStartTime) {
        long timeDifferenceInMillis = System.currentTimeMillis() - orderStartTime;
        long fiveMinutesInMillis = 5 * 60 * 1000;
        long startTime = orderStartTime + timeDifferenceInMillis;
        long endTime = startTime + fiveMinutesInMillis;
        OrderDAO orderDAO = new OrderDAO();
        CourierDAO courierDAO = new CourierDAO();

        long currentTime;
        while (!orderDAO.getOrderStatus(orderId).equals("ON_PROCESS") && System.currentTimeMillis() < endTime) {
            try {
                long timeLeftSeconds = (endTime - System.currentTimeMillis()) / 1000;
                timerLable.setText("If " + timeLeftSeconds + " secs again not accepted by restaurant, order automatically canceled");
                timeLeftSeconds--;
                Thread.sleep(1000); // Tunggu 1 detik sebelum memeriksa lagi

            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        if (System.currentTimeMillis() >= endTime) {

            orderDAO.cancelOrder(orderId);
        } else {

            int courierId = courierDAO.assignCourierToOrder(orderId);
            Map<String, Integer> generatedIds = new HashMap<>();
            generatedIds.put("courierId", courierId);
            generatedIds.put("userId", userId);
            generatedIds.put("orderId", orderId);
            generatedIds.put("restaurantId", restaurantId);
            generatedIds.put("paymentId", paymentId);
            dispose();
            DeliveryPage deliveryPage = new DeliveryPage(generatedIds);
            deliveryPage.setVisible(true);

        }
    }

    private void cancelOrder() {
        OrderDAO orderDAO = new OrderDAO();
        orderDAO.cancelOrder(orderId);
        Home home = new Home(userId);
        home.setVisible(true);
        dispose(); // Close the Timer window
    }

    private class TimerWorker extends SwingWorker<Void, Void> {

        private final int orderId;

        public TimerWorker(int orderId) {
            this.orderId = orderId;
        }

        @Override
        protected Void doInBackground() throws Exception {
            long timeDifferenceInMillis = System.currentTimeMillis() - orderTime;
            long fiveMinutesInMillis = 5 * 60 * 1000;
            long startTime = orderTime + timeDifferenceInMillis;
            long endTime = startTime + fiveMinutesInMillis;
            OrderDAO orderDAO = new OrderDAO();
            CourierDAO courierDAO = new CourierDAO();
            while (!isCancelled() && !orderDAO.getOrderStatus(orderId).equals("ON_PROCESS") && System.currentTimeMillis() < endTime) {
                try {
                    Thread.sleep(1000);
                    long timeLeftSeconds = (endTime - System.currentTimeMillis()) / 1000;
                    updateTimerLabel(timeLeftSeconds);
                } catch (InterruptedException e) {
                    if (!isCancelled()) {
                        e.printStackTrace();
                    }
                }
            }

            if (!isCancelled() && orderDAO.getOrderStatus(orderId).equals("ON_PROCESS")) {
                SwingUtilities.invokeLater(() -> {
                    // Logika untuk membuka DeliveryPage dan dispose Timer
                    int courierId = courierDAO.assignCourierToOrder(orderId);
                    Map<String, Integer> generatedIds = new HashMap<>();
                    generatedIds.put("courierId", courierId);
                    generatedIds.put("userId", userId);
                    generatedIds.put("orderId", orderId);
                    generatedIds.put("restaurantId", restaurantId);
                    generatedIds.put("paymentId", paymentId);
                    dispose();
                    DeliveryPage deliveryPage = new DeliveryPage(generatedIds);
                    deliveryPage.setVisible(true);
                });
            } else if (!isCancelled() && System.currentTimeMillis() >= endTime) {
                SwingUtilities.invokeLater(() -> {
                    orderDAO.cancelOrder(orderId);
                    cancelOrder();
                });
            }

            return null;
        }

        private void updateTimerLabel(long timeLeftSeconds) {
            SwingUtilities.invokeLater(()
                    -> timerLable.setText("If " + timeLeftSeconds + " secs again not accepted by restaurant, order automatically canceled")
            );
        }
    }
    /**
     * @param args the command line arguments
     */
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancleButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel timerLable;
    // End of variables declaration//GEN-END:variables
}
